// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: trains/trains.proto

package trains

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Trains_FindTrains_FullMethodName      = "/train_finder.Trains/FindTrains"
	Trains_GetTrainClasses_FullMethodName = "/train_finder.Trains/GetTrainClasses"
)

// TrainsClient is the client API for Trains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainsClient interface {
	FindTrains(ctx context.Context, in *FindTrainRequest, opts ...grpc.CallOption) (*FindTrainResponse, error)
	GetTrainClasses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrainClasses, error)
}

type trainsClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainsClient(cc grpc.ClientConnInterface) TrainsClient {
	return &trainsClient{cc}
}

func (c *trainsClient) FindTrains(ctx context.Context, in *FindTrainRequest, opts ...grpc.CallOption) (*FindTrainResponse, error) {
	out := new(FindTrainResponse)
	err := c.cc.Invoke(ctx, Trains_FindTrains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainsClient) GetTrainClasses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TrainClasses, error) {
	out := new(TrainClasses)
	err := c.cc.Invoke(ctx, Trains_GetTrainClasses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainsServer is the server API for Trains service.
// All implementations must embed UnimplementedTrainsServer
// for forward compatibility
type TrainsServer interface {
	FindTrains(context.Context, *FindTrainRequest) (*FindTrainResponse, error)
	GetTrainClasses(context.Context, *emptypb.Empty) (*TrainClasses, error)
	mustEmbedUnimplementedTrainsServer()
}

// UnimplementedTrainsServer must be embedded to have forward compatible implementations.
type UnimplementedTrainsServer struct {
}

func (UnimplementedTrainsServer) FindTrains(context.Context, *FindTrainRequest) (*FindTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTrains not implemented")
}
func (UnimplementedTrainsServer) GetTrainClasses(context.Context, *emptypb.Empty) (*TrainClasses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainClasses not implemented")
}
func (UnimplementedTrainsServer) mustEmbedUnimplementedTrainsServer() {}

// UnsafeTrainsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainsServer will
// result in compilation errors.
type UnsafeTrainsServer interface {
	mustEmbedUnimplementedTrainsServer()
}

func RegisterTrainsServer(s grpc.ServiceRegistrar, srv TrainsServer) {
	s.RegisterService(&Trains_ServiceDesc, srv)
}

func _Trains_FindTrains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainsServer).FindTrains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trains_FindTrains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainsServer).FindTrains(ctx, req.(*FindTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trains_GetTrainClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainsServer).GetTrainClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trains_GetTrainClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainsServer).GetTrainClasses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Trains_ServiceDesc is the grpc.ServiceDesc for Trains service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trains_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "train_finder.Trains",
	HandlerType: (*TrainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTrains",
			Handler:    _Trains_FindTrains_Handler,
		},
		{
			MethodName: "GetTrainClasses",
			Handler:    _Trains_GetTrainClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trains/trains.proto",
}
